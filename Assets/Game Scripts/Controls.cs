//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Debug"",
            ""id"": ""a3c0abf7-cb04-4b99-b780-a5f718882237"",
            ""actions"": [
                {
                    ""name"": ""NextTurn"",
                    ""type"": ""Button"",
                    ""id"": ""6faad1bf-c14a-4286-a1a9-ba88ccc8e866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeckNewCard"",
                    ""type"": ""Button"",
                    ""id"": ""b1d14ed7-e604-4c9b-bb83-f20560e0d886"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72c5c8ce-4ce7-4482-951e-ef4805ac07f0"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a030c3f8-87fd-41d0-b322-26550ee95f03"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeckNewCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_NextTurn = m_Debug.FindAction("NextTurn", throwIfNotFound: true);
        m_Debug_DeckNewCard = m_Debug.FindAction("DeckNewCard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_NextTurn;
    private readonly InputAction m_Debug_DeckNewCard;
    public struct DebugActions
    {
        private @Controls m_Wrapper;
        public DebugActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextTurn => m_Wrapper.m_Debug_NextTurn;
        public InputAction @DeckNewCard => m_Wrapper.m_Debug_DeckNewCard;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @NextTurn.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnNextTurn;
                @NextTurn.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnNextTurn;
                @NextTurn.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnNextTurn;
                @DeckNewCard.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnDeckNewCard;
                @DeckNewCard.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnDeckNewCard;
                @DeckNewCard.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnDeckNewCard;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextTurn.started += instance.OnNextTurn;
                @NextTurn.performed += instance.OnNextTurn;
                @NextTurn.canceled += instance.OnNextTurn;
                @DeckNewCard.started += instance.OnDeckNewCard;
                @DeckNewCard.performed += instance.OnDeckNewCard;
                @DeckNewCard.canceled += instance.OnDeckNewCard;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IDebugActions
    {
        void OnNextTurn(InputAction.CallbackContext context);
        void OnDeckNewCard(InputAction.CallbackContext context);
    }
}
